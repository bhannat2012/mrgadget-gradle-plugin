apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'fatjar'

version='0.1.1'

mrGadgetVersion = '0.2.3'

println "Using MrGadget version $mrGadgetVersion"

String build_location = 'LOCAL'

buildscript {
	dependencies {
		classpath 'eu.appsatori:gradle-fatjar-plugin:0.1.2' // adds fatJar task
	}
	repositories {
		mavenCentral()
	}
}

if (build_location == 'LOCAL') {

	println "USING LOCAL"
	
	dependencies {
		compile gradleApi() ext { fatJarExclude = true }
		groovy localGroovy() ext { fatJarExclude = true }
		compile "com.moksamedia:mrgadget:$mrGadgetVersion:jar-with-dependencies"  // *** don't forget about the stupid underscore instad of '.'
		//     in the group name when using GitHub
	}

	repositories {
		mavenCentral()
		flatDir {
			dirs '../mrgadget/build/libs'
		}

	}

}
else if (build_location == 'GITHUB') {
	
	println "USING GITHUB"
	
	dependencies {
		compile gradleApi() ext { fatJarExclude = true }
		groovy localGroovy() ext { fatJarExclude = true }
		compile 'com_moksamedia:mrgadget:0.2.2:jar-with-dependencies'  // *** don't forget about the stupid underscore instad of '.'
		//     in the group name when using GitHub
	}

	repositories {
		mavenCentral()
		
		 add(new org.apache.ivy.plugins.resolver.URLResolver()) {
		 name = 'mrgadget'
		 basePath = 'https://raw.github.com/moksamedia/MrGadget/master/repo'
		 addArtifactPattern "${basePath}/[organization]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
		 }

	}

}


fatJar {
	classifier 'jar-with-dependencies'
}

task generateApplyFromPlugin << {
	
	File mrGClasses = file('src/main/groovy/com/moksamedia/mrgadgetplugin/MrGadgetPlugin.groovy')
	String text = mrGClasses.text
	text = text.replaceFirst('package com.moksamedia.mrgadgetplugin', '')
	
	File mrGSrc = file('mrgadget-plugin.src')
	
	String headText = mrGSrc.text
	
	File toFile = file('mrgadget-plugin.gradle')
	
	String noEditHeader = "// THIS FILE IS AUTOGENERATED -- DO NOT EDIT!\n\n"
	String mrgVersion = "mrGadgetVersion=\"$mrGadgetVersion\"\n\n"
	toFile.write(noEditHeader + mrgVersion + headText + text + "\n")
	
}

// copy jar and fatJar to base project directory so they will be in git (and on github for download)
build << {
	
	generateApplyFromPlugin
	
	fatJar
	
	copy {
		println "Copying ${jar.archiveName} to base directory"
		from("$buildDir/libs/${jar.archiveName}")
		into("$projectDir/repo/com_moksamedia/mrgadget-plugin/$version")
	}
	copy {
		println "Copying ${fatJar.archiveName} to base directory"
		from("$buildDir/libs/${fatJar.archiveName}")
		into("$projectDir/repo/com_moksamedia/mrgadget-plugin/$version")
	}
	
}

/*
 * REQUIRED FOR OSS SONATYPE AND MAVEN CENTRAL DEPLOYMENT
 */

apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.moksamedia'

// create sources jar and javadoc jar (required for deployment to maven central)
task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

// add the jars as artifacts
artifacts {
	archives sourcesJar
	archives javadocJar
	archives jar
	archives fatJar
}

signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
 
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			  authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
 
			pom.project {
			   name 'MrGadget Gradle Plugin'
			   packaging 'jar'
			   description 'A Gradle plugin wrapper for MrGadget: a utility for deploying files to remote servers and executing commands on remote servers.'
			   url 'http://github.com/moksamedia/mrgadget-gradle-plugin'
			 
			   scm {
				   url 'scm:git@github.com:moksamedia/mrgadget-gradle-plugin.git'
				   connection 'scm:git@github.com:moksamedia/mrgadget-gradle-plugin.git'
				   developerConnection 'scm:git@github.com:moksamedia/mrgadget-gradle-plugin.git'
			   }
 
			   licenses {
				   license {
					   name 'The Apache Software License, Version 2.0'
					   url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					   distribution 'repo'
				   }
			   }
 
			   developers {
				   developer {
					   id 'cantgetnosleep'
					   name 'Andrew Hughes'
				   }
			   }
		   }
		}
	}
}
